// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mlilley/gomarks/repos (interfaces: MarkRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	app "github.com/mlilley/gomarks/app"
	reflect "reflect"
)

// MockMarkRepo is a mock of MarkRepo interface
type MockMarkRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMarkRepoMockRecorder
}

// MockMarkRepoMockRecorder is the mock recorder for MockMarkRepo
type MockMarkRepoMockRecorder struct {
	mock *MockMarkRepo
}

// NewMockMarkRepo creates a new mock instance
func NewMockMarkRepo(ctrl *gomock.Controller) *MockMarkRepo {
	mock := &MockMarkRepo{ctrl: ctrl}
	mock.recorder = &MockMarkRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarkRepo) EXPECT() *MockMarkRepoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMarkRepo) Create(arg0 *app.Mark) (*app.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*app.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMarkRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMarkRepo)(nil).Create), arg0)
}

// DeleteAll mocks base method
func (m *MockMarkRepo) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockMarkRepoMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockMarkRepo)(nil).DeleteAll))
}

// DeleteByID mocks base method
func (m *MockMarkRepo) DeleteByID(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockMarkRepoMockRecorder) DeleteByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockMarkRepo)(nil).DeleteByID), arg0)
}

// FindAll mocks base method
func (m *MockMarkRepo) FindAll() ([]app.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]app.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockMarkRepoMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMarkRepo)(nil).FindAll))
}

// FindAllByUserID mocks base method
func (m *MockMarkRepo) FindAllByUserID(arg0 string) ([]app.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByUserID", arg0)
	ret0, _ := ret[0].([]app.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByUserID indicates an expected call of FindAllByUserID
func (mr *MockMarkRepoMockRecorder) FindAllByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByUserID", reflect.TypeOf((*MockMarkRepo)(nil).FindAllByUserID), arg0)
}

// FindByID mocks base method
func (m *MockMarkRepo) FindByID(arg0 string) (*app.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*app.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockMarkRepoMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMarkRepo)(nil).FindByID), arg0)
}

// Update mocks base method
func (m *MockMarkRepo) Update(arg0 *app.Mark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockMarkRepoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMarkRepo)(nil).Update), arg0)
}
